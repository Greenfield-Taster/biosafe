import React, { useState, useRef, useEffect } from "react";
import emailjs from "@emailjs/browser";
import {
  loadCaptchaEnginge,
  LoadCanvasTemplate,
  validateCaptcha,
} from "react-simple-captcha";
import "../styles/scss/RequestConsultation.scss";

const RequestConsultation = () => {
  const formRef = useRef();
  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    phone: "",
    comment: "",
    captcha: "",
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState("");
  const [errors, setErrors] = useState({});

  useEffect(() => {
    loadCaptchaEnginge(6);
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    const { fullName, email, phone, captcha } = formData;

    if (!fullName.trim()) {
      newErrors.fullName = "–ü–æ–ª–µ –ü–Ü–ë —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º";
    } else if (fullName.trim().length < 2) {
      newErrors.fullName = "–ü–Ü–ë –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏";
    }

    if (!email.trim()) {
      newErrors.email = "–ü–æ–ª–µ Email —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º";
    } else {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        newErrors.email = "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π email –∞–¥—Ä–µ—Å";
      }
    }

    if (!phone.trim()) {
      newErrors.phone = "–ü–æ–ª–µ –¢–µ–ª–µ—Ñ–æ–Ω —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º";
    } else {
      const phoneRegex = /^[+]?[0-9\s-()]{10,}$/;
      if (!phoneRegex.test(phone.replace(/\s/g, ""))) {
        newErrors.phone = "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É";
      }
    }

    if (!captcha.trim()) {
      newErrors.captcha = "–ü–æ–ª–µ –ö–∞–ø—á–∞ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º";
    } else if (!validateCaptcha(captcha)) {
      newErrors.captcha = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥ –∫–∞–ø—á—ñ";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      setSubmitStatus("validation_error");
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus("");
    setErrors({});

    try {
      // EmailJS configuration
      const serviceId =
        import.meta.env.VITE_EMAILJS_SERVICE_ID || "YOUR_SERVICE_ID";
      const templateId =
        import.meta.env.VITE_EMAILJS_TEMPLATE_ID || "YOUR_TEMPLATE_ID";
      const publicKey =
        import.meta.env.VITE_EMAILJS_PUBLIC_KEY || "YOUR_PUBLIC_KEY";

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
      if (
        serviceId === "YOUR_SERVICE_ID" ||
        templateId === "YOUR_TEMPLATE_ID" ||
        publicKey === "YOUR_PUBLIC_KEY"
      ) {
        throw new Error("EmailJS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
      }

      const templateParams = {
        to_name: "BioSafe Team",
        from_name: formData.fullName,
        from_email: formData.email,
        phone: formData.phone,
        message: formData.comment || "–ù–µ–º–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤",
        reply_to: formData.email,
        date: new Date().toLocaleString("uk-UA"),
      };

      const response = await emailjs.send(
        serviceId,
        templateId,
        templateParams,
        publicKey
      );

      if (response.status === 200) {
        setSubmitStatus("success");
        setFormData({
          fullName: "",
          email: "",
          phone: "",
          comment: "",
          captcha: "",
        });

        loadCaptchaEnginge(6);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥
        setTimeout(() => setSubmitStatus(""), 6000);
      } else {
        throw new Error("–ù–µ—Å–ø—ñ—à–Ω–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞");
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:", error);

      if (error.message.includes("EmailJS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")) {
        setSubmitStatus("config_error");
      } else if (error.text && error.text.includes("network")) {
        setSubmitStatus("network_error");
      } else {
        setSubmitStatus("error");
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  const getStatusMessage = () => {
    switch (submitStatus) {
      case "success":
        return {
          type: "success",
          message:
            "‚úÖ –ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
        };
      case "error":
        return {
          type: "error",
          message:
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ —ñ–Ω—à–∏–º —Å–ø–æ—Å–æ–±–æ–º.",
        };
      case "network_error":
        return {
          type: "error",
          message:
            "üåê –ü—Ä–æ–±–ª–µ–º–∞ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        };
      case "config_error":
        return {
          type: "error",
          message:
            "‚öôÔ∏è –°–ª—É–∂–±–∞ email —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ —ñ–Ω—à–∏–º —Å–ø–æ—Å–æ–±–æ–º.",
        };
      case "validation_error":
        return {
          type: "error",
          message: "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—ñ –Ω–∏–∂—á–µ.",
        };
      default:
        return null;
    }
  };

  const statusMessage = getStatusMessage();

  return (
    <div className="request-consultation">
      <div className="request-consultation__container">
        <div className="request-consultation__header">
          <h1 className="request-consultation__title">
            –ó–∞—è–≤–∫–∞ –Ω–∞ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é
          </h1>
          <p className="request-consultation__subtitle">
            –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –Ω–∏–∂—á–µ, —ñ –Ω–∞—à –µ–∫—Å–ø–µ—Ä—Ç –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º
            —á–∞—Å–æ–º –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
          </p>
        </div>

        <form
          ref={formRef}
          className="request-consultation__form"
          onSubmit={handleSubmit}
          noValidate
        >
          <div className="form-section">
            <h2 className="form-section__title">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —Ñ–æ—Ä–º–∞:</h2>

            <div className="form-group">
              <label htmlFor="fullName" className="form-label">
                –ü–Ü–ë: <span className="required">*</span>
              </label>
              <input
                type="text"
                id="fullName"
                name="fullName"
                value={formData.fullName}
                onChange={handleInputChange}
                className={`form-input ${
                  errors.fullName ? "form-input--error" : ""
                }`}
                required
                placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è"
                disabled={isSubmitting}
                autoComplete="name"
              />
              {errors.fullName && (
                <span className="form-error">{errors.fullName}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="email" className="form-label">
                Email: <span className="required">*</span>
              </label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                className={`form-input ${
                  errors.email ? "form-input--error" : ""
                }`}
                required
                placeholder="example@email.com"
                disabled={isSubmitting}
                autoComplete="email"
              />
              {errors.email && (
                <span className="form-error">{errors.email}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="phone" className="form-label">
                –¢–µ–ª–µ—Ñ–æ–Ω: <span className="required">*</span>
              </label>
              <input
                type="tel"
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                className={`form-input ${
                  errors.phone ? "form-input--error" : ""
                }`}
                required
                placeholder="+380 XX XXX XX XX"
                disabled={isSubmitting}
                autoComplete="tel"
              />
              {errors.phone && (
                <span className="form-error">{errors.phone}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="comment" className="form-label">
                –ö–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è:
              </label>
              <textarea
                id="comment"
                name="comment"
                value={formData.comment}
                onChange={handleInputChange}
                className="form-textarea"
                rows="4"
                placeholder="–û–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó, –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –±—É–¥—å-—è–∫—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ..."
                disabled={isSubmitting}
              />
            </div>

            <div className="form-group captcha-group">
              <label htmlFor="captcha" className="form-label">
                –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: <span className="required">*</span>
              </label>
              <div className="captcha-container">
                <div className="captcha-image">
                  <LoadCanvasTemplate />
                </div>
                <input
                  type="text"
                  id="captcha"
                  name="captcha"
                  value={formData.captcha}
                  onChange={handleInputChange}
                  className={`form-input captcha-input ${
                    errors.captcha ? "form-input--error" : ""
                  }`}
                  required
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏"
                  disabled={isSubmitting}
                  maxLength="6"
                />
              </div>
              {errors.captcha && (
                <span className="form-error">{errors.captcha}</span>
              )}
              <p className="captcha-help">
                –í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª–∏, —è–∫—ñ –≤–∏ –±–∞—á–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω—Ü—ñ –≤–∏—â–µ
              </p>
            </div>

            <button
              type="submit"
              className="submit-button"
              disabled={isSubmitting}
            >
              {isSubmitting ? "–ù–ê–î–°–ò–õ–ê–ù–ù–Ø..." : "–ù–ê–î–Ü–°–õ–ê–¢–ò –ó–ê–Ø–í–ö–£"}
            </button>

            {statusMessage && (
              <div
                className={`status-message status-message--${statusMessage.type}`}
              >
                <p>{statusMessage.message}</p>
              </div>
            )}
          </div>
        </form>
      </div>
    </div>
  );
};

export default RequestConsultation;
